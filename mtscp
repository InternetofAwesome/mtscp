#!/bin/bash 

# MINSIZE=$((50*1024))
MINSIZE=0
THREADS=4
BLOCK_SIZE=$((1024*4))

#pids of all our dd processes
pids=()
#files that will get the status output from dd
fds=()
#fifo pipes tied to ssh sessions
ssh_pipes=()
start_time=0
mypid=$$
echo myy pid: $mypid

function finish {
	pkill -P $$
	rm ${ssh_pipes[@]}
	rm ${fds[@]}
	echo Done
}
trap finish EXIT

running()
{
	processes=$(ps --ppid $mypid --no-headers | wc -l )
	echo "running processes:  $processes " $((processes==1))
	return $((processes==1))
}

get_transferred()
{
	transferred=0
	for i in $(seq 0 $THREADS); do
		kill -USR1  ${pids[i]} 2> /dev/null
		# read line <${fds[i]}
		# echo "read line: $line"
		# tail -n1 ${fds[i]}
		sz=$(tail -n1 ${fds[i]} | sed -n 's/\([0-9]\+\) bytes.*/\1/p' )
		# echo "transferred size is ($sz)"
		transferred=$((transferred+sz))
	done
	echo $transferred
}


size=$(du -b $1 | awk '{print $1}')
echo file size: $size
echo block size: $BLOCK_SIZE
ssh root@s.samsurl.com "rm $2 -f; dd if=/dev/zero of=$2 bs=$size count=1"
start_time=$(date +%s)
if(($size > $MINSIZE)); then
	#calculate how many BLOCK_SIZE blocks there are in the file. 
	blocks=$((size/BLOCK_SIZE))
	#calculate how many blocks each file chunk will be
	chunk_size=$((blocks/THREADS))
	echo "$blocks total blocks with chunk size of $chunk_size blocks"
	for i in $(seq 0 $THREADS); do
		#calculate the starting block offset to read/write to
		start=$((chunk_size*i))
		#make a temp file to act as the fifo buffer
		fds[$i]=`mktemp`
		#make a fifo buffer to hold output from dd.
		# mkfifo ${fds[i]}
		fifo=$(mktemp --dry-run)
		ssh_pipes+=($fifo)
		mkfifo $fifo
		echo fifo: $fifo
		ssh root@s.samsurl.com "dd of="$2" bs=$BLOCK_SIZE seek=$((chunk_size*i)) count=$chunk_size " <$fifo 2> /dev/null&
		dd if="$1" bs=$BLOCK_SIZE skip=$((chunk_size*i)) count=$chunk_size >$fifo 2>${fds[i]} &
		#get the PID of the process just spawned
		pids[$i]=$!
		# echo "got pid ${pids[i]}"
	done
	
	#start_xfer=$(get_transferred)
	start_xfer=0
	
	until(( $(ps --ppid $mypid --no-headers | wc -l ) == 1 )) ; do
		now=$(date +%s)
		elapsed=$((now - start_time))
		total_xfer=$(get_transferred - start_xfer)
		if(( elapsed != 0 )); then
			echo -e "$((total_xfer/1024/1024)) MB / $((size/1024/1024)) MB - $((total_xfer/elapsed/1024)) kB/s"
		fi
		sleep 1
	done
else
	# scp $1 $2
	echo 'asdf'
fi

echo "waiting on processes to finish"
wait